정규표현식(Regular Expression) : 문자열에서 특정 내용을 찾기 위한 패턴

//정규 표현식 리터럴 방식
const re = / 정규표현식 /
ex) const re = /abc/

//생성자 호출 방식
const re = new RegExp("정규표현식")	//RegExp : 정규표현식 약자
ex) const re = new RegExp("abc") 

정규 표현식 메소드
("문자열").match(/정규표현식/플래그)	"문자열"에서 "정규표현식"에 매칭되는 항목들을 배열로 반환

("문자열").replace(/정규표현식/, "대체문자열")	"정규표현식"에 매칭되는 항목을 "대체문자열"로 변환

("문자열").split(정규표현식)	"문자열"을 "정규표현식"에 매칭되는 항목으로 쪼개어 배열로 반환

(정규표현식).test("문자열")	"문자열"이 "정규표현식"과 매칭되면 true, 아니면 false반환

(정규표현식).exec("문자열")	match메서드와 유사(단, 무조건 첫번째 매칭 결과만 반환)

1. 이메일 검증
- 이메일의 형태
(아이디(문자열)) @ (사이트(문자열)) . (com,,kr..문자열)
[a-zA-Z0-9]+@+[a-zA-Z]+\.[a-z]{2,3}
a~Z, 0~9까지의 문자열 + @ + a~Z까지 문자열 + .(특수문자 확인시 \ 필요) a~z사이의 문자열 최소 2자리 최대 3자리

let re = new RegExp('[a-zA-Z0-9]+@+[a-zA-Z]+\.[a-z]{2,3}');
if (!(re.test(email.value))) 

2. 비밀번호 
대문자, 특수문자, 숫자 1개이상, 8자리 이상

대문자 확인
?=.*[A-Z]
특수문자
?=.*[!@#$%^*+=-]
숫자
?=.*[0-9]
8자리 이상
{8,}

(?=.*[A-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]){8,}
let pass = new RegExp('(?=.*[A-Z])(?=.*[!@#$%^*+=-])(?=.*[0-9]){8,}');
if (!(pass.test(password.value))) 
